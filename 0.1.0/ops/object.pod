=head1 NAME

object.ops

=head1 DESCRIPTION

Parrot's library of object ops

=over 4


=cut

=item B<callmethod>()

=item B<callmethod>(in STR)

Call a method on an object. If a method name is provided, we find
the PMC for the named method and put it into the sub/method slot.
If no name is provided, then we assume that the method PMC and
method name are already in their proper places. We assume that
all other registers are correctly set up, as per the Parrot
calling conventions.


=cut

=item B<callmethodcc>()

=item B<callmethodcc>(in STR)

Make a method call, automatically generating a return continuation. If
a method name is passed in we look up the method PMC for the object
and put it in the method slot. If a method name isn't provided then we
assume that things are already properly set up. Note that the return
continuation is placed in P1.


=cut

=item B<tailcallmethod>

=item B<tailcallmethod>(in STR)

Make a tailcall to method $1. If no method name is given, we assume
everything is already set up properly.


=cut

=item B<can>(out INT, in PMC, in STR)

Sets $1 to true or false, depending on whether $2 ->can the method in $3.


=cut

=item B<does>(out INT, in PMC, in STR)

Sets $1 to true or false, depending on whether $2 ->does the interface in $3.

=item B<isa>(out INT, in PMC, in STR)

Sets $1 to true or false, depending on whether $2 isa $3.


=cut

=item B<newclass>(out PMC, in STR)

Creates a new Parrot-style class, named $2, and puts the new PMC for it
into $1. (This is a real out--the contents of $1 are ignored and the
pointer for the new PMC is put in there).


=cut

=item B<subclass>(out PMC, in PMC)

=item B<subclass>(out PMC, in PMC, in STR)

=item B<subclass>(out PMC, in STR)

=item B<subclass>(out PMC, in STR, in STR)

Create a new class, put in $1, that is a subclass of $2. $3, if available,
is the name of the new class--if not, the subclass is an anonymous subclass.

$1 is replaced--a new PMC for the subclass is generated and put in it.


=cut

=item B<findclass>(out INT, in STR)

Returns 1 if the class exists, 0 if it does not.


=cut

=item B<getclass>(out PMC, in STR)

Find the PMC for a class, by name. Note that this is a one-level hash, so for
classes that have some structure you need to impose that structure externally.

Parrot's conventions are that level separators are noted with the NULL
character, so Perl's Foo::Bar would be Foo\0Bar.


=cut

=item B<singleton>(in PMC)

Take the object in $1 and put it into its own singleton class, which is
an anonymous subclass of the object's current class.


=cut

=item B<class>(out PMC, in PMC)

Get the class PMC for the object in $2 and put it in $1.


=cut

=item B<classname>(out STR, in PMC)

Get the class name for the class in $2 and put it in $1.


=cut

=item B<addparent>(in PMC, in PMC)

Add class $2 to the list of parent classes for $1.


=cut

=item B<removeparent>(in PMC, in PMC)

Remove class $2 from class $1's list of parents.


=cut

=item B<addattribute>(in PMC, in STR)

Add the attribute named $2 to the class $1.


=cut

=item B<removeattribute>(in PMC, in STR)

=item B<removeattribute>(in PMC, in INT)

Remove attribute $2 from class $1, specified either by name or offset.


=cut

=item B<getattribute>(out PMC, in PMC, in INT)

Get attribute number $3 from object $2 and put the result in $1.


=cut

=item B<setattribute>(in PMC, in INT, in PMC)

Set attribute $2 of object $1 to $3


=cut

=item B<classoffset>(out INT, in PMC, in STR)

Returns the offset of the first attribute for class $3 in object $2.
Throws an exception if $3 isn't in $2's hierarchy.


=cut

=item B<adddoes>(in PMC, in STR)

Add $2 to the list of interfaces that this class claims to implement.

=item B<removedoes>(in PMC, in STR)

Remove $2 from the list of interfaces that this class claims to
implement.


=back


###############################################################################

=head1 COPYRIGHT

Copyright (C) 2001-2004 The Perl Foundation.  All rights reserved.

=head1 LICENSE

This program is free software. It is subject to the same license
as the Parrot interpreter itself.


=cut

