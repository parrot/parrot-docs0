=head1 NAME

io.ops


=cut

=head1 DESCRIPTION

Parrot's IO API 


=cut

=head2 Parrot IO API Operations 


=over 4


=cut

=item B<close>(inout PMC)

Close IO object $1


=cut

=item B<fdopen>(out PMC, in INT, in STR)

Create ParrotIO object as $1 as a copy of file descriptor $2.

XXX: integral file descriptors may not exist outside of the UNIX
     platform.  This op needs work.


=cut

=item B<open>(out PMC, in STR, in STR)

Open URL (file, address, database, in core image) named $2 with
Perl style mode string in $3 and create an IO object in $1.


=cut

=item B<open>(out INT, in STR)

Open file named $2 for reading and writing and save the file
descriptor into $1.

=item B<open>(out INT, in STR, in STR)

Open file named $2 with flags $3 and mode 0644 (rw-r--r--), and save the file
descriptor into $1.


=cut

=item B<close>(out INT)

Close file opened on file descriptor $1.


=cut

=item B<print>(in INT)

=item B<print>(in NUM)

=item B<print>(in PMC)

=item B<print>(in STR)

Print $1 to standard output.

=item B<print>(in INT, in INT)

=item B<print>(in INT, in NUM)

=item B<print>(in INT, in STR)

=item B<print>(in INT, in PMC)

Print $2 to the file specified by file descriptor $1; for $1 equal to
0, 1 or 2, we use stdin, stdout or stderr respectively.


=cut

=item B<print>(in PMC, in STR)

Print String $2 on the IO stream object $1.


=cut

=item B<printerr>(in STR)

Print $1 to interp.stderr IO stream (unbuffered)


=cut

=item B<puts>(in STR)

=item B<puts>(in INT)

=item B<puts>(in NUM)

Print $1 to standard output stream
This will go away when print ops are all migrated to
use ParrotIO instead of STDIO. Right now ParrotIO is
not stable enough to replace STDIO.


=cut

=item B<read>(out STR, in INT)

Read up to N bytes from standard input stream
If stream is linebuffered, will return at EOL, for
files it will read MIN(MAX(avail, N), 65535) bytes.
Warning: This is a quick hack.

=item B<read>(out STR, in PMC, in INT)

Read up to N bytes from IO PMC stream. 
If stream is linebuffered, will return at EOL, for
files it will read MIN(MAX(avail, N), 65535) bytes.
Warning: This is a quick hack.


=cut

=item B<seek>(out INT, in PMC, in INT, in INT)

32bit seek:
Set file position to offset $3 on IO stream $2. 'whence' is
indicated by the value in $4.

=item B<seek>(out INT, in PMC, in INT, in INT, in INT)

64bit seek:
Set file position to offset ($3 << 32 | $4) on IO stream $2. 'whence' is
indicated by the value in $4.


=cut

=back


=cut

=head1 COPYRIGHT

Copyright (C) 2001-2002 Yet Another Society. All rights reserved.

=head1 LICENSE

This program is free software. It is subject to the same license
as the Parrot interpreter itself.


=cut

